package edu.mayo.bsi.nlp2fhir.gui;

import edu.mayo.bsi.nlp2fhir.gui.model.pipelinebuilder.BuildablePipeline;
import edu.mayo.bsi.nlp2fhir.gui.model.pipelinebuilder.tasks.DeserializationTask;
import edu.mayo.bsi.nlp2fhir.gui.model.pipelinebuilder.tasks.ResourceTask;
import edu.mayo.bsi.nlp2fhir.gui.model.pipelinebuilder.tasks.SerializationTask;
import picocli.CommandLine;
import picocli.CommandLine.Command;
import picocli.CommandLine.Option;

import java.util.Arrays;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;

@Command(name = "cli", mixinStandardHelpOptions = true, version = "NLP2FHIR CLI 1.0",
        description = "NLP2FHIR - A FHIR-based Clinical Data Normalization Pipeline", sortOptions = false)
public class CLI implements Runnable {

    // === Pipeline Components ===
    // Collection Reader Equivalent
    private final DeserializationTask cr = new DeserializationTask();
    // Analysis Engine Equivalent
    private final ResourceTask ae = new ResourceTask();
    // Cas Consumer Equivalent
    private final SerializationTask cc = new SerializationTask();

    //CLI Options mirror selection options in GUI
    @Option(order = 0, names = {"-a", "--api-key"}, description = "UMLS API Key to verify access to UMLS.  Required element for pipeline to work.")
    private String umlsApiKey = "";

    // default cTAKES v4.0.0.1 username for using API key
    private String umlsUserName = "umls_api_key";

    @Option(order = 1, names = {"-i", "--input"}, description = "Input directory for files to be processed by NLP2FHIR.  Default: [./input/]")
    private String inputDirectory = "input";

    @Option(order = 1, names = {"-o", "--output"}, description = "Output directory for files generated by NLP2FHIR.  Default: [./output/]")
    private String outputDirectory = "output";

    @Option(order = 2, names = {"-s", "--section-def"}, description = "Tab Delimted (TSV) Section defintion file for section detection of text input.  File is required when using text as input.")
    private String sectionDefinitionFile="CORD19.csv";


    @Option(order = 5, names = {"-N", "--no-fhir"}, negatable = true, description = "Remove FHIR Bundle output. FHIR Bundle output enabled by default.")
    boolean outputFhir = true;
    @Option(order = 5, names = {"-X", "--output-xmi"}, description = "Add XMI output. No XMI output by default.")
    boolean outputXmi = false;
    
    //Anafora currently disabled since not fully tested
    //@Option(order = 5, names = {"-A", "--output-anafora"}, description = "Add Anafora output. No Anafora output by default.")
    boolean outputAnafora = false;
    @Option(order = 5, names = {"-K", "--output-knowtator"}, description = "Add Knowtator output. No Knowtator output by default.")
    boolean outputKnowtator = false;
    @Option(order = 5, names = {"-T", "--output-text"}, description = "Add Text output. No Text output by default.")
    boolean outputText = false;

    @Option(order = 3, names={"-t", "--input-type"}, description = "Choose input type [comp|bundle|xmi|text] for FHIR Composition Resources, FHIR Bundle Resources, XMI, and text formats repsectively.  Default=[text]")
    String inputType="text";
    int inputmode = 3;

    @Option(order = 4, names={"-r", "--resources"}, arity = "1..4", description="Specify which resources to produce with the following integers:\n 0. Medication List Resources \n 1. Procedures and Conditions\n 2. Family Medical History\n 3. Observation Resources \n Example usage: -r 0 1 \n Default: All Resources selected")
    int[] resourcesToProduce = new int[]{0, 1, 2, 3};

    @Option(order = 10, names="--cli-debug", description = "add debug output for parsing CLI arguments to stdout.")
    boolean debug = false;


    public CompletableFuture<Boolean> buildAndExecutePipeline() {
        BuildablePipeline pipeline = new BuildablePipeline();
        cr.construct(pipeline);
        ae.construct(pipeline);
        cc.construct(pipeline);
        return pipeline.executePipeline();
    }



    //picocli will run after options are parsed from Command Line arguments
    @Override
    public void run() {

        //set input type:
        switch (inputType)
        {
            case "comp":
                inputmode = 0;
                break;
            case "bundle":
                inputmode = 1;
                break;
            case "xmi":
                inputmode = 2;
                break;
            case "text":
                inputmode = 3;
                break;
            default:
                System.out.println("ERROR: Invalid input type <" + inputType + "> entered.  Please view available options from --help menu.");
                System.exit(1);
        }



        System.out.println("Running NLP2FHIR using CLI");
        if(debug) {
            System.out.println("Input Dir: " + inputDirectory);
            System.out.println("Output Dir: " + outputDirectory);
            System.out.println("Section Definition File: " + sectionDefinitionFile);
            System.out.println("Input mode: " + inputType + " - mode selected: " + inputmode);
            System.out.println("Resources Array (array should include only from 0 to 2): " + Arrays.toString(resourcesToProduce));
            System.out.println("Output type: Fhir:" + outputFhir + " xmi:" + outputXmi + " anafora: " + outputAnafora + " knowtator: " + outputKnowtator + " text:" + outputText);
        }


        System.setProperty("ctakes.umlsuser", umlsUserName);
        System.setProperty("ctakes.umlspw", umlsApiKey);
        cr.getOptions().get("INPUT_DIRECTORY").get(0).setValue(inputDirectory);
        cr.getOptions().get("INPUT_TYPE").get(0).setSelectedIndices(new int[]{inputmode}); //input type 3 = text
        cr.getOptions().get("SECTION_DEFINITION_FILE").get(0).setValue(sectionDefinitionFile);

        ae.getOptions().get("RESOURCES_TO_PRODUCE").get(0).setSelectedIndices(resourcesToProduce); //TODO: add selection (currently produce all)

        cc.getOptions().get("OUTPUT_DIR").get(0).setValue(outputDirectory);

        //following options (0 = output, 1 = do not output).  Multiple outputs can be selected
        cc.getOptions().get("OUTPUT_XMI").get(0).setSelectedIndices(new int[]{outputXmi ? 0:1}); //if outputXmi is True: 0 for output
        cc.getOptions().get("OUTPUT_ANAFORA").get(0).setSelectedIndices(new int[]{outputAnafora ? 0:1});
        cc.getOptions().get("OUTPUT_KNOWTATOR").get(0).setSelectedIndices(new int[]{outputKnowtator ? 0:1});
        cc.getOptions().get("OUTPUT_TEXT").get(0).setSelectedIndices(new int[]{outputText ? 0:1});
        cc.getOptions().get("OUTPUT_FHIR_BUNDLE").get(0).setSelectedIndices(new int[]{outputFhir ? 0:1});


        CompletableFuture<Boolean> result = buildAndExecutePipeline();
        Boolean ret = null;
        try {
            while (ret == null) {
                try {
                    ret = result.get();
                } catch (InterruptedException ignored) {
                }
            }

        } catch (ExecutionException e1) {
            e1.printStackTrace();
            throw new RuntimeException(e1);
            // TODO handle this
        }



    }

    public static void main(String[] args) {
        System.setProperty("vocab.src.dir", System.getProperty("user.dir"));
        int exitCode = new CommandLine(new CLI()).execute(args);
        System.exit(exitCode);
    }
}
